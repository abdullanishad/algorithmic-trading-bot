# package import statement
import configparser
from smartapi import SmartConnect
import pandas as pd
from datetime import datetime
import requests
import numpy as np
import math
from datetime import *
import re
from time import sleep
from time import time as tim
from bs4 import BeautifulSoup
from IPython.display import clear_output
import nsepython

# create confiParser object for managing credentials
config = configparser.ConfigParser()

#read credentials for angel login
config.read('my_credentials.ini')

#storing in credential in a variable
client_id = config['angel']['client_id']
password = config['angel']['password']
api_key = config['angel']['api_key']


# holidays
def today_is_a_trading_holiday():
    response = requests.get('https://zerodha.com/marketintel/holiday-calendar/')
    soup = BeautifulSoup(response.text, 'html.parser')
    soup = soup.find_all(name='h4')[0]
    holiday = soup.find(string=re.compile("The next trading holiday"))
    next_holiday = '-'.join(re.findall('([0-3][0-9]) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)',holiday)[0])
    next_holiday = next_holiday+'-'+str(datetime.now().year)
    next_holiday = datetime.strptime(next_holiday,'%d-%b-%Y').date()
    return next_holiday == datetime.today().date()

#place order
def place_order(token,symbol,qty,exch_seg,buy_sell,ordertype,triggerprice,price,variety):
    try:
        orderparams = {
            "variety": variety,
            "tradingsymbol": symbol,
            "symboltoken": token,
            "transactiontype": buy_sell,
            "exchange": exch_seg,
            "ordertype": ordertype,
            "producttype": "INTRADAY",
            "duration": "DAY",
            "price": price,
            "triggerprice":triggerprice, 
            "variety":variety,
            "squareoff": "0",
            "stoploss": "0",
            "quantity": qty
            }
        orderId=obj.placeOrder(orderparams)
        print("The order id is: {}".format(orderId))
        return orderId
    except Exception as e:
        print("Order placement failed: {}".format(e))
        
# fetch scrip json file and create data frame 
def intializeSymbolTokenMap():
    url = 'https://margincalculator.angelbroking.com/OpenAPI_File/files/OpenAPIScripMaster.json'
    d = requests.get(url).json()
    global token_df
    token_df = 'test inside fun'
    token_df = pd.DataFrame.from_dict(d)
    token_df['expiry'] = pd.to_datetime(token_df['expiry'])
    token_df = token_df.astype({'strike': float})

# fetch token/instrument from dataframe
def getTokenInfo (symbol,exch_seg='NSE',instrumenttype='OPTIDX',strike_price='',pe_ce='CE',expiry=None):
    df = token_df
    strike_price = strike_price*100
    if exch_seg == 'NSE':
        eq_df = df[(df['exch_seg'] == 'NSE') ]
        return eq_df[eq_df['name'] == symbol]
    elif exch_seg == 'NFO' and ((instrumenttype == 'FUTSTK') or (instrumenttype == 'FUTIDX')):
        return df[(df['exch_seg'] == 'NFO') & (df['instrumenttype'] == instrumenttype) & (df['name'] == symbol)].sort_values(by=['expiry'])
    elif exch_seg == 'NFO' and (instrumenttype == 'OPTSTK' or instrumenttype == 'OPTIDX'):
        return df[(df['exch_seg'] == 'NFO') & (df['instrumenttype'] == instrumenttype) & (df['name'] == symbol) & (df['strike'] == strike_price) & (df['symbol'].str.endswith(pe_ce))].sort_values(by=['expiry'])


if __name__ == '__main__':
    intializeSymbolTokenMap()
    obj=SmartConnect(api_key=api_key)
    data = obj.generateSession(client_id,password)
    refreshToken= data['data']['refreshToken']
    feedToken=obj.getfeedToken()
    # credentials.FEED_TOKEN = feedToken
    print(feedToken)
    userProfile= obj.getProfile(refreshToken)
    print(userProfile)

def exit_all_position():
    try:
        if obj.orderBook()['data'] != None:
            sleep(1)
            for i in obj.orderBook()['data']:
                if i['status'] == 'trigger pending':
                    obj.cancelOrder(i['orderid'],'STOPLOSS')
                    print('try 1: for 1')
                sleep(0.2)
        # close all open positions
        open_positions = obj.position()
        if open_positions['data'] != None:
            sleep(1)
            for i in open_positions['data']:
                if int(i['netqty']) < 0:
                    place_order(i['symboltoken'],i['tradingsymbol'],abs(int(i['netqty'])),i['exchange'],
                                'BUY','MARKET',0,0,"NORMAL")
                    print('try 1: for 2')
                sleep(0.2)
            for i in open_positions['data']:
                if int(i['netqty']) > 0:
                    place_order(i['symboltoken'],i['tradingsymbol'],abs(int(i['netqty'])),i['exchange'],
                                'SELL','MARKET',0,0,"NORMAL")
                    print('try 1: for 3')
                sleep(0.2)
    except Exception as e:
        try:
            sleep(1.2)
            if obj.orderBook()['data'] != None:
                sleep(1.2)
                for i in obj.orderBook()['data']:
                    if i['status'] == 'trigger pending':
                        obj.cancelOrder(i['orderid'],'STOPLOSS')
                        print('try 2: for 1')
                    sleep(1.2)
            # close all open positions
            open_positions = obj.position()
            if open_positions['data'] != None:
                sleep(1.2)
                for i in open_positions['data']:
                    if int(i['netqty']) < 0:
                        sleep(0.5)
                        place_order(i['symboltoken'],i['tradingsymbol'],abs(int(i['netqty'])),i['exchange'],
                                    'BUY','MARKET',0,0,"NORMAL")
                        print('try 2: for 2')
                    sleep(1.2)
                for i in open_positions['data']:
                    if int(i['netqty']) > 0:
                        sleep(0.5)
                        place_order(i['symboltoken'],i['tradingsymbol'],abs(int(i['netqty'])),i['exchange'],
                                    'SELL','MARKET',0,0,"NORMAL")
                        print('try 2: for 3')
                    sleep(1.2)
        except Exception as e:
                print("position digger failed: {}".format(e))

def reentry(orderid,tradingsymbol,symboltoken,exchange,qty,stock_reentry):
    
    prev_order_avg = 0
    orderbook = list(filter(lambda orderbook: orderbook['orderid'] == orderid, obj.orderBook()['data']))
    prev_order_avg = ce_orderbook[0]['averageprice']
    
    latest_candle_close = 10000
    current_time = datetime.now() - timedelta(minutes = 1)
    current_time = current_time.strftime('%Y-%m-%d %H:%M')
    try:
        # first try without sleep. current 1m candle open 
        try:
            historicParam={
            "exchange": exchange,
            "symboltoken": symboltoken,
            "interval": "ONE_MINUTE",
            "fromdate": current_time, 
            "todate": current_time
            }
            latest_candle_close = obj.getCandleData(historicParam)['data'][0][4]
        except TypeError:
            pass
        except Exception as e:
            print("Historic Api failed 1: {}".format(e))
            
    except:
        # second try with sleep 1 sec against access rate limit
        try:
            sleep(1)
            historicParam={
            "exchange": exchange,
            "symboltoken": symboltoken,
            "interval": "ONE_MINUTE",
            "fromdate": current_time, 
            "todate": current_time
            }
            latest_candle_close = obj.getCandleData(historicParam)['data'][0][4]
        except Exception as e:
            print("reentry method failed: {}".format(e))

    updated_order_id = orderid
    if latest_candle_close < prev_order_avg:
        
        print(f'latest candle : {latest_candle_close} ,previous candle : {prev_order_avg}')
        
        sleep(0.1)
        updated_order_id = place_order(symboltoken,tradingsymbol,qty, exchange,'SELL','MARKET',0,0,"NORMAL")
        
        sleep(1)
        orderbook_r = list(filter(lambda orderbook: orderbook['orderid'] == updated_order_id, obj.orderBook()['data']))
        orderprice_r = orderbook_r[0]['averageprice']
        sl_trigger_r = round(int(orderprice_r) * 1.2,2)
        sl_price_r = sl_trigger_r + 5
        sl_orderid_r = place_order(symboltoken,tradingsymbol,qty,exchange,'BUY','STOPLOSS_LIMIT',sl_trigger_r,sl_price_r,"STOPLOSS")
        stock_reentry -= 1
        
        print(f'available reentry for {tradingsymbol} : {stock_reentry}')

    return updated_order_id, stock_reentry

def position_digger(token_1,token_2):
    global pos_ce_qty,pos_pe_qty,mtm
    pos_ce_qty,pos_pe_qty,mtm = None, None, 0
    try:
#         start = datetime.now()
        positions = pd.DataFrame(obj.position()['data'])
        mtm = positions['pnl'].astype(float).sum()
        filt1 = (positions['symboltoken'] == token_1)
        pos_ce_qty =  int(positions[filt1]['netqty'].iloc[0])
        filt2 = (positions['symboltoken'] == token_2)
        pos_pe_qty =  int(positions[filt2]['netqty'].iloc[0])
#         end = datetime.now()
#         clear_output(wait=True)
#         print(f'position 1: {pos_ce_qty} qty....position 2: {pos_pe_qty} qty...... p&l : {mtm}')
    except Exception as e:
        try:
#             start = datetime.now()
            sleep(1)
            positions = pd.DataFrame(obj.position()['data'])
            mtm = positions['pnl'].astype(float).sum()
            filt1 = (positions['symboltoken'] == token_1)
            pos_ce_qty =  int(positions[filt1]['netqty'].iloc[0])
            filt2 = (positions['symboltoken'] == token_2)
            pos_pe_qty =  int(positions[filt2]['netqty'].iloc[0])
#             end = datetime.now()
#             clear_output(wait=True)
#             print(f'position 1: {pos_ce_qty} qty....position 2: {pos_pe_qty} qty...... p&l : {mtm}')
        except Exception as e:
            try:
#                 start = datetime.now()
                sleep(2)
                positions = pd.DataFrame(obj.position()['data'])
                mtm = positions['pnl'].astype(float).sum()
                filt1 = (positions['symboltoken'] == token_1)
                pos_ce_qty =  int(positions[filt1]['netqty'].iloc[0])
                filt2 = (positions['symboltoken'] == token_2)
                pos_pe_qty =  int(positions[filt2]['netqty'].iloc[0])
#                 end = datetime.now()
#                 clear_output(wait=True)
#                 print(f'position 1: {pos_ce_qty} qty....position 2: {pos_pe_qty} qty...... p&l : {mtm}')
            except Exception as e:
                print("position digger failed: {}".format(e))

# body of program to run
weekday_today = datetime.now().weekday()
if (weekday_today != 5) & (weekday_today != 6):
    if today_is_a_trading_holiday() == False:
        
        # wait till 9:20 am
        while datetime.now().time() < time(10,44,54):
            sleep(1)
        
        symbol = 'NIFTY'
        quantity = 150
        max_mtm = -4100
        
        # loading current week expiry and pick atm and hedges
        payload = nsepython.nse_optionchain_scrapper(symbol)
        currentExpiry,dte = nsepython.nse_expirydetails(payload,0)
        spot_token = getTokenInfo(symbol).iloc[0]['token']
        spot_ltp_data = obj.ltpData('NSE',symbol,spot_token)['data']['ltp']
        if symbol == 'BANKNIFTY':
            atm_strike = 100 * round(spot_ltp_data/100)
            hedge_ce_points = 1800
            hedge_pe_points = -1800
        elif symbol == 'NIFTY':
            atm_strike = 50 * round(spot_ltp_data/50)
            hedge_ce_points = 600
            hedge_pe_points = -600
        
        q = 6
        
        # hedge 
        if (weekday_today == 2)|(weekday_today == 3):  
            quantity = quantity * 2
            max_mtm = max_mtm * 2
            sleep(1)
            hedge_ce = getTokenInfo(symbol,'NFO','OPTIDX',atm_strike+hedge_ce_points,'CE',currentExpiry).iloc[0]
            hegde_ce_symbol  = hedge_ce['symbol']
            hegde_ce_token = hedge_ce['token']
            hegde_ce_qty = quantity
            hegde_ce_exch = hedge_ce['exch_seg']
            sleep(0.4)
            hegde_ce_orderid = place_order(hegde_ce_token,hegde_ce_symbol,hegde_ce_qty,'NFO','BUY','MARKET',0,0,"NORMAL")
            sleep(1)
            hedge_pe = getTokenInfo(symbol,'NFO','OPTIDX',atm_strike+hedge_pe_points,'PE',currentExpiry).iloc[0]
            hedge_pe_symbol  = hedge_pe['symbol']
            hedge_pe_token = hedge_pe['token']
            hedge_pe_qty = quantity
            hedge_pe_exch = hedge_pe['exch_seg']
            sleep(0.4)
            hedge_pe_orderid = place_order(hedge_pe_token,hedge_pe_symbol,hedge_pe_qty,'NFO','BUY','MARKET',0,0,"NORMAL")
            q = 3

        
        sleep(q)
        # initial entry
        atm_ce = getTokenInfo(symbol,'NFO','OPTIDX',atm_strike,'CE',currentExpiry).iloc[0]
        ce_symbol  = atm_ce['symbol']
        ce_token = atm_ce['token']
        ce_qty = quantity
        ce_exch = atm_ce['exch_seg']
        sleep(0.5)
        ce_orderid = place_order(ce_token,ce_symbol,ce_qty,'NFO','SELL','MARKET',0,0,"NORMAL")
        ce_reentry = 2
        
        sleep(0.5)
        atm_pe = getTokenInfo(symbol,'NFO','OPTIDX',atm_strike,'PE',currentExpiry).iloc[0]
        pe_symbol  = atm_pe['symbol']
        pe_token = atm_pe['token']
        pe_qty = quantity
        pe_exch = atm_pe['exch_seg']
        sleep(0.5)
        pe_orderid = place_order(pe_token,pe_symbol,pe_qty,'NFO','SELL','MARKET',0,0,"NORMAL")
        pe_reentry = 2
        
        sleep(0.5)
        # 30% stop loss 
        ce_orderbook = list(filter(lambda orderbook: orderbook['orderid'] == ce_orderid, obj.orderBook()['data']))
        ce_orderprice = ce_orderbook[0]['averageprice']
        ce_sl_trigger = round(int(ce_orderprice) * 1.3,2)
        ce_sl_price = ce_sl_trigger + 5
        sleep(0.5)
        ce_sl_orderid = place_order(ce_token,ce_symbol,ce_qty,'NFO','BUY','STOPLOSS_LIMIT',ce_sl_trigger,ce_sl_price,"STOPLOSS")

        sleep(0.5)
        pe_orderbook = list(filter(lambda orderbook: orderbook['orderid'] == pe_orderid, obj.orderBook()['data']))
        pe_orderprice = pe_orderbook[0]['averageprice']
        pe_sl_trigger = round(int(pe_orderprice) * 1.3,2)
        pe_sl_price = pe_sl_trigger + 5
        sleep(0.5)
        pe_sl_orderid = place_order(pe_token,pe_symbol,pe_qty,'NFO','BUY','STOPLOSS_LIMIT',pe_sl_trigger,pe_sl_price,"STOPLOSS")
                
        
        # incase the algo breaks
        print(f"ce_symbol='{ce_symbol}'\nce_token='{ce_token}'\nce_qty={ce_qty}")
        print(f"ce_exch='{ce_exch}'\nce_orderid='{ce_orderid}'\nce_reentry={ce_reentry}\n")
        print(f"pe_symbol='{pe_symbol}'\npe_token='{pe_token}'\npe_qty={pe_qty}")
        print(f"pe_exch='{pe_exch}'\npe_orderid='{pe_orderid}'\npe_reentry={pe_reentry}")
        print(f"ce_sl_orderid='{ce_sl_orderid}'\npe_sl_orderid='{pe_sl_orderid}'\nmax_mtm={max_mtm}")

        # after initial entry
        while datetime.now().time() < time(15,9,58):

            # dig positions mtm and quantities
            position_digger(ce_token,pe_token)
            if mtm <= max_mtm:
                break
            else:

                if pos_ce_qty == 0 and ce_reentry > 0:
                    ce_orderid, ce_reentry = reentry(ce_orderid,ce_symbol,ce_token,ce_exch,ce_qty,ce_reentry)

                if pos_pe_qty == 0 and pe_reentry > 0:
                    pe_orderid, pe_reentry = reentry(pe_orderid,pe_symbol,pe_token,pe_exch,pe_qty,pe_reentry)

        print('exiting all position')
        exit_all_position()
